name: Benchmark

on:
  workflow_dispatch:
    inputs:
      title:
        description: "A title for this comparison run"
        type: string
        default: ""
        required: false
      old:
        description: "Old version to compare"
        type: string
        default: "latest"
        required: true
      new:
        description: "New version to compare"
        type: string
        default: "trunk"
        required: true
      theme:
        description: "Theme to test"
        type: choice
        options:
        - twentytwentyone
        - twentytwentythree
        - twentytwentyfour
        - twentytwentyfive
        required: true
      memcached:
        description: 'Memcached enabled'
        type: 'boolean'
        default: false
        required: false
      locale:
        description: 'Locale to use'
        type: 'string'
        default: 'en_US'
        required: false

permissions:
  models: read

jobs:
  benchmarks:
    name: "Benchmarks"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Checkout
        uses: actions/checkout@v5
        with:
          repository: GoogleChromeLabs/wpp-research
          path: wpp-research

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version-file: ".nvmrc"
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Install wp-env
        run: npm -g i @wordpress/env

      - name: Install wpp-research dependencies
        working-directory: wpp-research
        run: npm ci

      - name: Configure WordPress versions
        run: |
          echo "Old version: $OLD_VERSION"
          if [[ $OLD_VERSION != 'latest' ]]; then
            if [[ "$OLD_VERSION" == *".zip"* ]]; then
              echo "{\"core\":\"$OLD_VERSION\"}" >> old/.wp-env.override.json
            else
              echo "{\"core\":\"WordPress/WordPress#$OLD_VERSION\"}" >> old/.wp-env.override.json
            fi
          fi

          echo "New version: $NEW_VERSION"
          if [[ "$NEW_VERSION" == *".zip"* ]]; then
            echo "{\"core\":\"$NEW_VERSION\"}" >> new/.wp-env.override.json
          else
            echo "{\"core\":\"WordPress/WordPress#$NEW_VERSION\"}" >> new/.wp-env.override.json
          fi
        env:
          OLD_VERSION: ${{ inputs.old == 'trunk' && 'master' || inputs.old }}
          NEW_VERSION: ${{ inputs.new == 'trunk' && 'master' || inputs.new }}

      - name: Install WordPress
        run: |
          chmod -R 767 old/ # TODO: Possibly integrate in wp-env
          chmod -R 767 new/ # TODO: Possibly integrate in wp-env
          (cd old && wp-env start)
          (cd new && wp-env start)
        env:
          LOCAL_PHP_MEMCACHED: ${{ inputs.memcached }}

      - name: Install additional languages
        run: |
          (cd old && wp-env run tests-cli wp language core install ${{ inputs.locale }})
          (cd old && wp-env run tests-cli wp language plugin install ${{ inputs.locale }} -- --all)
          (cd old && wp-env run tests-cli wp language theme install ${{ inputs.locale }} -- --all)
          (cd old && wp-env run tests-cli wp site switch-language ${{ inputs.locale }})
          (cd new && wp-env run tests-cli wp language core install ${{ inputs.locale }})
          (cd new && wp-env run tests-cli wp language plugin install ${{ inputs.locale }} -- --all)
          (cd new && wp-env run tests-cli wp language theme install ${{ inputs.locale }} -- --all)
          (cd new && wp-env run tests-cli wp site switch-language ${{ inputs.locale }})
        if: ${{ inputs.locale != 'en_US' }}

      - name: Update permalink structure
        run: |
          (cd old && wp-env run tests-cli wp rewrite structure '/%postname%/' -- --hard)
          (cd new && wp-env run tests-cli wp rewrite structure '/%postname%/' -- --hard)

      - name: Import mock data
        run: |
          (cd old && wp-env run tests-cli curl https://raw.githubusercontent.com/WordPress/theme-test-data/b9752e0533a5acbb876951a8cbb5bcc69a56474c/themeunittestdata.wordpress.xml -- --output /tmp/themeunittestdata.wordpress.xml)
          (cd old && wp-env run tests-cli wp import /tmp/themeunittestdata.wordpress.xml -- --authors=create)
          (cd new && wp-env run tests-cli curl https://raw.githubusercontent.com/WordPress/theme-test-data/b9752e0533a5acbb876951a8cbb5bcc69a56474c/themeunittestdata.wordpress.xml -- --output /tmp/themeunittestdata.wordpress.xml)
          (cd new && wp-env run tests-cli wp import /tmp/themeunittestdata.wordpress.xml -- --authors=create)

      - name: Deactivate WordPress Importer
        run: |
          (cd old && wp-env run tests-cli wp plugin deactivate wordpress-importer)
          (cd new && wp-env run tests-cli wp plugin deactivate wordpress-importer)

      - name: Post Debugging Info
        run: |
          echo "Old version â€“ Theme info"
          (cd old && npm run wp-env run tests-cli wp theme list)
          echo "New version â€“ Theme info"
          (cd new && npm run wp-env run tests-cli wp theme list)

      - name: Install theme
        run: |
          (cd old && wp-env run tests-cli wp theme activate $THEME)
          (cd new && wp-env run tests-cli wp theme activate $THEME)
        env:
          THEME: ${{ inputs.theme }}

      # See https://issues.chromium.org/issues/373753919
      # and https://chromium.googlesource.com/chromium/src/+/main/docs/security/apparmor-userns-restrictions.md
      - name: Disable AppArmor
        run: echo 0 | sudo tee /proc/sys/kernel/apparmor_restrict_unprivileged_userns

      - name: Benchmark Web Vitals
        id: web-vitals
        working-directory: wpp-research
        run: |
          npm run research --silent -- benchmark-web-vitals -u http://localhost:8881/ -n 100 -c "broadband" -w 1280x720 -p -v -o csv > before.csv
          npm run research --silent -- benchmark-web-vitals -u http://localhost:8891/ -n 100 -c "broadband" -w 1280x720 -p -v -o csv > after.csv
          SUMMARY=$(cat summary.md)
          echo "$SUMMARY" >> "$GITHUB_STEP_SUMMARY"
          {
            echo 'SUMMARY<<EOF'
            echo "$SUMMARY"
            echo EOF
          } >> "$GITHUB_OUTPUT"
        env:
          THEME: ${{ inputs.theme }}
          MEMCACHED: ${{ inputs.memcached }}
          OLD_VERSION: ${{ inputs.old == 'trunk' && 'master' || inputs.old }}
          NEW_VERSION: ${{ inputs.new == 'trunk' && 'master' || inputs.new }}
          TITLE: ${{ inputs.title }}

      - name: Benchmark Server-Timing
        id: server-timing
        working-directory: wpp-research
        run: |
          npm run research --silent -- benchmark-server-timing -u http://localhost:8881/ -n 100 -p -v -o csv > before.csv
          npm run research --silent -- benchmark-server-timing -u http://localhost:8891/ -n 100 -p -v -o csv > after.csv
          node ../scripts/results.js "Server timing: $TITLE (Theme: $THEME | Old version: $OLD_VERSION | New Version: $NEW_VERSION | memcached: $MEMCACHED)" before.csv after.csv > summary.md
          SUMMARY=$(cat summary.md)
          echo "$SUMMARY" >> "$GITHUB_STEP_SUMMARY"
          {
            echo 'SUMMARY<<EOF'
            echo "$SUMMARY"
            echo EOF
          } >> "$GITHUB_OUTPUT"
        env:
          THEME: ${{ inputs.theme }}
          MEMCACHED: ${{ inputs.memcached }}
          OLD_VERSION: ${{ inputs.old == 'trunk' && 'master' || inputs.old }}
          NEW_VERSION: ${{ inputs.new == 'trunk' && 'master' || inputs.new }}
          TITLE: ${{ inputs.title }}

      - name: AI Summary for Non-Technical Users
        id: ai-summary
        uses: actions/ai-inference@v1
        with:
          prompt: |
            Please analyze the following WordPress performance benchmark results and provide a clear, easy-to-understand summary for non-technical users.

            The benchmark compares two WordPress versions:
            - Old version: ${{ inputs.old == 'trunk' && 'master' || inputs.old }}
            - New version: ${{ inputs.new == 'trunk' && 'master' || inputs.new }}
            - Theme: ${{ inputs.theme }}
            - Memcached: ${{ inputs.memcached }}

            Here are the benchmark results:

            Core Web Vitals:

            ${{ steps.web-vitals.outputs.summary }}

            Server Timing:

            ${{ steps.server-timing.outputs.summary }}

            Please explain:
            1. Whether the new version is faster or slower than the old version
            2. How significant the performance differences are
            3. What this means for everyday WordPress users

            Use simple language without technical jargon. If a metric shows improvement, clearly state that. If it shows regression, explain that too. Keep it concise.

      - name: Add AI summary to step summary
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ðŸ¤– AI Summary for Non-Technical Users" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.ai-summary.outputs.response }}" >> $GITHUB_STEP_SUMMARY
